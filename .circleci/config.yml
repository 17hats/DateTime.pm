version: 2.1

anchors: &coverage
  description: |
    Set this to enable coverage reporting for a test run. This will
    use Devel::Cover to determine coverage. The exact value you set
    this to determines how the report is handled.

    The 'clover' and 'html' settings will simply produce artifacts
    that are uploaded as part of the job.

    The 'codecov' option will automatically upload your coverage
    report to codecov.io.

    The 'coveralls' option will upload the report to coveralls.io,
    but you need to set the COVERALLS_REPO_TOKEN env var to make
    this work.

    The 'kritika' option will upload the report to kritika.io, but
    you need to set the KRITIKA_TOKEN env var to make this work.
  type: enum
  enum:
    - ""
    - clover
    - codecov
    - coveralls
    - html
    - kritika
  default: ""

orbs:
  perl:
    description: Helpers for testing Perl project on Linux (in Docker) with CircleCI

    orbs:
      windows: circleci/windows@1.0.0

    commands:
      pre-build:
        description: Prepare the build for caching
        parameters:
          perl-version:
            description: The version of the runtime Perl being used
            type: string
        steps:
          - run:
              name: Pre build
              command: |
                ~/circleci-perl-helpers-tools/bin/with-perl build-perl pre-build.pl \
                    --runtime-perl << parameters.perl-version >>
      restore-authordeps-cache:
        description: Restore cached authordeps needed to build the distro
        steps:
          - restore_cache:
              name: Restore authordeps cache
              keys:
                - v6-authordeps-linux-{{ checksum "~/cache/authordeps-cpanfile" }}-{{ checksum "~/cache/build-perl-version" }}
      install-authordeps:
        description: Install deps needed to build the distro
        steps:
          - run:
              name: Install authordeps
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl install-authordeps.pl
      save-authordeps-cache:
        description: Save authordeps needed to build the distro
        steps:
          - save_cache:
              name: Save cache of authordeps
              key: v6-authordeps-linux-{{ checksum "~/cache/authordeps-cpanfile" }}-{{ checksum "~/cache/build-perl-version" }}
              paths: ~/perl-local/build-perl
      build-dist:
        description: Build the distro and put it in a separate directory for test running
        steps:
          - run:
              name: Build distro
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl build-dist.pl
      build-cpanfile:
        description: Build a cpanfile for the distro's runtime deps to facilitate caching
        steps:
          - run:
              name: Build cpanfile for distro
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl build-cpanfile.pl
      restore-prereqs-cache:
        description: Restore cached runtime deps needed to test the distro
        parameters:
          disable-runtime-cache:
            description: If this is true then caching of runtime deps will be skipped. This should be true for all blead builds.
            type: boolean
        steps:
          - unless:
              condition: << parameters.disable-runtime-cache >>
              steps:
                - restore_cache:
                    name: Restore prereqs cache
                    keys:
                      - v6-prereqs-linux-{{ checksum "~/cache/prereqs-cpanfile" }}-{{ checksum "~/cache/runtime-perl-version" }}
      install-prereqs:
        description: Install deps needed to build the distro
        steps:
          - run:
              name: Install deps
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl install-prereqs.pl
      save-prereqs-cache:
        description: Save runtime deps needed to test the distro
        parameters:
          disable-runtime-cache:
            description: If this is true then caching of runtime deps will be skipped. This should be true for all blead builds.
            type: boolean
        steps:
          - unless:
              condition: << parameters.disable-runtime-cache >>
              steps:
                - save_cache:
                    name: Save cache of prereqs
                    key: v6-prereqs-linux-{{ checksum "~/cache/prereqs-cpanfile" }}-{{ checksum "~/cache/runtime-perl-version" }}
                    paths: ~/perl-local/runtime-perl
      prep-distro-for-tests:
        description: Run final make/Build commands needed to prep distro for tests
        steps:
          - run:
              name: Run make or Build
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl prep-for-tests.pl
      run-tests:
        description: Run tests
        parameters:
          coverage:
            <<: *coverage
        steps:
          - run:
              name: Run tests
              command: ~/circleci-perl-helpers-tools/bin/with-perl build-perl run-tests.pl
      store-test-results:
        description: Store the test results for display in CircleCI.
        steps:
          - store_test_results:
              path: ~/test-results
      store-coverage-results:
        description: Store coverage results as artifacts, if they exist.
        steps:
          - when:
              condition: << parameters.coverage >>
              steps:
                - store_artifacts:
                    path: ~/coverage

      install-tools:
        # This base64 blob is the result of running `tar -cvzf
        # /tmp/tools.tar.gz ./tools && base64 /tmp/tools.tar.gz` in the root
        # of the github.com:houseabsolute/circleci-perl-helpers repo. This
        # works around the fact that the macOS and Windows builds run on an
        # image that we don't supply. Unlike with Docker, there's no way to
        # bake the helper tools into the base image/VM that CircleCI launches
        # for non-Linux platforms.
        # 
        # There are some other ways to do this, for example downloading a
        # tarball from the helpers repo's release page or cloning a tag from
        # the helpers repo itself, but I don't love either solution. In both
        # cases I would have to sync the release of this orb to publishing
        # something in the repo. That's not a huge issue, but I really like
        # the idea that the orb is totally self-contained. So once the orb is
        # published, I know that version will work indefinitely no matter what
        # I do with the repo. Ideally, CircleCI would
        #
        # On Windows a single echo command with the entire content fails with:
        #     bash: -c: line 1: unexpected EOF while looking for matching `"'
        #
        # Presumably bash on Windows has a shorter limit for single commands.
        description: Install the helper tools
        # Install the helper tools steps
        steps:
          - run:
              name: Install the helper tools - base64 spew part 1
              command: |
                set -e
                set -x
                echo '' >> /tmp/tools-base64
          - run:
              name: Install the helper tools - base64 spew part 2
              command: |
                set -e
                set -x
                echo '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' >> /tmp/tools-base64
          - run:
              name: Turn base64 encoded tools into tarball and unpack
              command: |
                set -e
                set -x
                cat /tmp/tools-base64 | base64 --decode > /tmp/tools.tar.gz
                mkdir ~/circleci-perl-helpers-tools
                tar -xvzf /tmp/tools.tar.gz --strip-components 1 --directory ~/circleci-perl-helpers-tools

    jobs:
      linux-build-and-test:
        description: Builds the Perl distro in a Docker container (running Linux) and runs its tests
        parameters:
          image-name:
            description: The name of the image to use.
            type: string
            default: "houseabsolute/circleci-perl-helpers-ubuntu"
          perl-version:
            description: Which version of Perl to use for this job. This will be used as a tag to select the Docker image.
            type: string
          run-xt-tests:
            description: |
              If this is true tests in the xt directory will be true, and the
              AUTHOR_TESTING and RELEASE_TESTING env vars will be set to true
              values when running tests.
            type: boolean
            default: false
          disable-runtime-cache:
            description: |
              If this is true then caching of runtime deps will be
              skipped. This should be true for all blead builds since blead's
              ABI may change between runs, breaking previously compiled XS
              code.
            type: boolean
            default: false
          coverage:
            <<: *coverage
          debug:
            description: Enable verbose output from each step.
            type: boolean
            default: false
        docker:
          - image: << parameters.image-name >>:<< parameters.perl-version >>
            environment:
              CCIPH_TEST_XT: <<# parameters.run-xt-tests >>1<</ parameters.run-xt-tests >>
              CCIPH_DEBUG: <<# parameters.debug >>1<</ parameters.debug >>
        steps:
          - checkout
          - pre-build:
              perl-version: << parameters.perl-version >>
          - restore-authordeps-cache
          - install-authordeps
          - save-authordeps-cache
          - build-dist
          - build-cpanfile
          - restore-prereqs-cache:
              disable-runtime-cache: << parameters.disable-runtime-cache >>
          - install-prereqs
          - save-prereqs-cache:
              disable-runtime-cache: << parameters.disable-runtime-cache >>
          - prep-distro-for-tests
          - run-tests:
              coverage: << parameters.coverage >>
          - store-test-results

      macos-build-and-test:
        description: Builds the Perl distro on macOS and runs its tests
        parameters:
          perl-version:
            description: Which version of Perl to use for this job
            type: string
          run-xt-tests:
            description: |
              If this is true tests in the xt directory will be true, and the
              AUTHOR_TESTING and RELEASE_TESTING env vars will be set to true
              values when running tests.
            type: boolean
            default: false
          disable-runtime-cache:
            description: |
              If this is true then caching of runtime deps will be
              skipped. This should be true for all blead builds since blead's
              ABI may change between runs, breaking previously compiled XS
              code.
            type: boolean
            default: false
          coverage:
            <<: *coverage
          debug:
            description: Enable verbose output from each step.
            type: boolean
            default: false
        macos:
          xcode: "11.0.0"
        environment:
          CCIPH_TEST_XT: <<# parameters.run-xt-tests >>1<</ parameters.run-xt-tests >>
          CCIPH_DEBUG: <<# parameters.debug >>1<</ parameters.debug >>
          CCIPH_FINAL_BUILD_DIR: ~/circleci-perl-helpers-build-dir
        steps:
          - install-tools
          - run:
              name: Install perlbrew
              command: curl -L https://install.perlbrew.pl | sh
          - run:
              name: Install cpm
              command: |
                mkdir ~/bin && \
                curl -fsSL --compressed https://git.io/cpm > ~/bin/cpm && \
                chmod 0755 ~/bin/cpm
          - restore_cache:
              name: Restore perl installations cache
              keys:
                - v6-perl-macos-build-perl=5.30.0-runtime-perl=<< parameters.perl-version >>
          - run:
              name: Perlbrew install Perl 5.30.0 as build-perl
              command: |
                if [ ! -d ~/perl5/perlbrew/perls/build-perl ]; then
                    ~/perl5/perlbrew/bin/perlbrew install --verbose --notest --noman -j 4 --as build-perl 5.30.0
                fi
          - run:
              name: Perlbrew install selected perl version as runtime-perl
              command: |
                if [ ! -d ~/perl5/perlbrew/perls/runtime-perl ]; then
                    ~/perl5/perlbrew/bin/perlbrew install --verbose --notest --noman -j 4 --as runtime-perl << parameters.perl-version >>
                fi
          - save_cache:
              name: Save cache of perl installations
              key: v6-perl-macos-build-perl=5.30.0-runtime-perl=<< parameters.perl-version >>
              paths:
                - ~/perl5
          - restore_cache:
              name: Restore build tool modules cache
              keys:
                - v7-perl-macos-build-perl=5.30.0-{{ checksum "~/circleci-perl-helpers-tools/cpanfile" }}
          - run:
              name: Install tools prereqs
              command: |
                ~/perl5/perlbrew/bin/perlbrew exec --with build-perl \
                ~/bin/cpm install \
                --local-lib-contained ~/perl-local/build-perl \
                --show-build-log-on-failure \
                --verbose \
                --workers 4 \
                --cpanfile ~/circleci-perl-helpers-tools/cpanfile
          - save_cache:
              name: Save cache of build tool modules
              key: v7-perl-macos-build-perl=5.30.0-{{ checksum "~/circleci-perl-helpers-tools/cpanfile" }}
              paths:
                - ~/perl-local/build-perl
          - checkout
          - pre-build:
              perl-version: << parameters.perl-version >>
          - restore-authordeps-cache
          - install-authordeps
          - save-authordeps-cache
          - build-dist
          - build-cpanfile
          - restore-prereqs-cache:
              disable-runtime-cache: << parameters.disable-runtime-cache >>
          - install-prereqs
          - save-prereqs-cache:
              disable-runtime-cache: << parameters.disable-runtime-cache >>
          - prep-distro-for-tests
          - run-tests:
              coverage: << parameters.coverage >>
          - store-test-results

      windows-build-and-test:
        description: Builds the Perl distro on Windows and runs its tests
        parameters:
          perl-version:
            description: Which version of Perl to use for this job
            type: string
          run-xt-tests:
            description: |
              If this is true tests in the xt directory will be true, and the
              AUTHOR_TESTING and RELEASE_TESTING env vars will be set to true
              values when running tests.
            type: boolean
            default: false
          coverage:
            <<: *coverage
          debug:
            description: Enable verbose output from each step.
            type: boolean
            default: false
        executor:
          name: windows/vs2019
          shell: bash.exe
        environment:
          CCIPH_TEST_XT: <<# parameters.run-xt-tests >>1<</ parameters.run-xt-tests >>
          CCIPH_DEBUG: <<# parameters.debug >>1<</ parameters.debug >>
          CCIPH_FINAL_BUILD_DIR: ~/circleci-perl-helpers-build-dir
        steps:
          - run:
              command: echo $OSTYPE
          - install-tools
          - run:
              name: Install or upgrade berrybrew choco package if needed
              command: |
                set -eo pipefail
                choco upgrade berrybrew --yes
          - run:
              name: Berrybrew install Perl 5.30.0 as build-perl
              command: berrybrew install 5.30.0_64
          - run:
              name: Berrybrew install selected perl version
              command: berrybrew install 5.30.0_64
          - checkout
          - pre-build:
              perl-version: << parameters.perl-version >>
          - restore-authordeps-cache
          - install-authordeps
          - save-authordeps-cache
          - build-dist
          - build-cpanfile
          - restore-prereqs-cache:
              disable-runtime-cache: false
          - install-prereqs
          - save-prereqs-cache:
              disable-runtime-cache: false
          - prep-distro-for-tests
          - run-tests:
              coverage: << parameters.coverage >>
          - store-test-results

workflows:
  version: 2
  test-all-perls:
    jobs:
      - perl/windows-build-and-test:
          name: windows-5.28.2
          perl-version: "5.28.2"
          debug: true
      - perl/linux-build-and-test:
          name: linux-5.28.2
          perl-version: "5.28.2"
          coverage: codecov
          debug: true
